- upgrade dependencies, TS 3 -> TS 5
- TS strict option

- breaking change: remove Enumerable type and also 'of' and 'from' functions
- breaking change: groupby, returing Map instead of custom type IterableGroup, no overload for resultSelector function (use map operator)
- breaking change: changing distinct, introducing distinctby (caution: previously distinct with lambda worked like today's distinctby !)
- breaking change: changing implementation of last, adding parameter 'defaultValue'
- breaking change: single single does not throw exception !!, remove previous inconsistency (exception when more than one, 'undefined' when not found), now returing 
always 'undefined' or 'defaultValue' parameter (so no exception at all)
- breaking change: new unionby, intersectby, exceptby operators extracted from union, intersect, except
- breaking change: scan is returing init value of acculumator
- breaking change: groupjoin returns empty arrays for unmachted items
- breaking change: additional generic type argument to toobject function (second or third depending on the overload), 
the new is for K for "key" and can be passed to element selector, problem occurs while explicte calls like toobject<any,any>()
- breaking change: remove asiterable

- new overload for toobject() passing Iterable<[K,E]> type (for example Map), usefull after groupby and countby

- new operator groupbytoobject
- new countby operator
- new memoize operator
- new share operator
- new pairwise operator
- new partitionby operator
- new combinations operator
- new filtermap operator
- new interleave operator
- new interpose operator
- new flat operator
- new unionby, intersectby, exceptby, distinctby

- shorter generic argument names, introduction of Func<T,R>
- new more generic type definition of pipe function 
- powerseq is compatible with |> operator